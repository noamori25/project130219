
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project130219
{
    static public class MyCanvas
    {
        public const int MAX_WIDTH = 800;
        public const int MAX_HEIGHT = 600;
        private static int buttonIndex = 0;
        private static int MaxButtons = 3;
        private static MyButton[] buttons = new MyButton[MaxButtons];

        public static bool CreateNewButton(int x1, int y1, int x2, int y2)
        {
            MyButton Newbutton = new MyButton(new Point(x1, y1), new Point(x2, y2));
            if (buttonIndex < MaxButtons)
            {
                buttons[buttonIndex] = Newbutton;
                buttonIndex++;
                return true;
            }
            else
            {
                Console.WriteLine("the max number of buttons is: " + MaxButtons);
            }
            
            return false;
        }


        public static bool MoveButton(int buttonNumber, int x, int y)
        {
            if (buttonNumber <= buttonIndex)
            {
                int newXTop = buttons[buttonNumber].GetTopLeft().GetX () + x;
                int newYTop = buttons[buttonNumber].GetTopLeft().GetY() + y;
                int newXBottom = buttons[buttonNumber].GetBottomRight().GetX() + x;
                int newYBottom = buttons[buttonNumber].GetBottomRight().GetY() + y;
                MyButton moveButton = new MyButton(new Point(newXTop, newYTop), new Point(newXBottom, newYBottom));
                return true;
            }
            return false;

        }

        public static bool DeleteLastButton()
        {
            if (buttons [buttonIndex-1] == null)
            {
                return false;
            }
            else
            {
                buttons[buttonIndex-1] = null;
                buttonIndex--;
                return true;
            }
            
        }

        public static void ClearAllButton()
        {
            if (buttons.Length > 0)
            {
                buttons = new MyButton[MaxButtons];
            }
        }

        public static int GetCurrentNumberOfButtons()
        {
            return buttonIndex;
        }

        public static int GetMaxNumberOfButtons()
        {
            return MaxButtons;
        }

        public static int GetTheMaxWidthOfAButton()
        {
            int maxWidth = 0;
            for (int i = 0; i < buttons.Length; i ++)
            {
                if(buttons[i].GetWidth() > maxWidth)
                {
                    maxWidth = buttons[i].GetWidth();
                }
            }
            return maxWidth;
        }

        public static int GetTheMaxHeightOfAButton()
        {
            int maxHeight = 0;
            for (int i = 0; i < buttons.Length; i ++)
            {
                if (buttons[i].GetHeight() > maxHeight)
                {
                    maxHeight = buttons[i].GetHeight();
                }
            }
            return maxHeight;
        }

        public static void PrintButtons ()
        {
            for (int i = 0; i < buttons.Length; i++)
            {
                Console.Write("Top left point x: " + buttons[i].GetTopLeft().GetX());
                Console.WriteLine(" y: " +buttons[i].GetTopLeft().GetY());
                Console.Write("Bottom right x: " + buttons[i].GetBottomRight().GetX());
                Console.WriteLine(" y: " + buttons[i].GetBottomRight().GetY());

            }
        }

        public static bool IsPointInsideAButton(int x, int y)
        {
            for (int i = 0; i < buttons.Length; i++)
            {
                if (x < buttons[i].GetTopLeft().GetX() || x > buttons[i].GetBottomRight().GetX() && y > buttons[i].GetTopLeft().GetY() || y < buttons[i].GetBottomRight().GetY() )
                {
                    return true;
                }
            }
            return false;
        }

        public static bool CheckIfAnyButtonIsOverlapping()
        {
            for (int i = 0; i < buttons.Length; i ++)
            {
                int area = CalcAreaBotton(buttons[i].GetHeight(), buttons[i].GetWidth());
                for (int j = i+1; j < buttons.Length; j ++)
                {
                    if (area == CalcAreaBotton(buttons[j].GetHeight(),buttons[j].GetWidth()))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        internal static int CalcAreaBotton (int x, int y)
        {
            int area = x * y;
            return area;
        }

    }

    
}
